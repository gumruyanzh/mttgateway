# Generated by Django 4.2.7 on 2025-07-16 21:58

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customers', '0001_initial'),
        ('merchant', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerPaymentMethod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nickname', models.CharField(blank=True, max_length=100)),
                ('token', models.CharField(max_length=255)),
                ('last_four', models.CharField(blank=True, max_length=4)),
                ('card_brand', models.CharField(blank=True, max_length=20)),
                ('expiry_month', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('expiry_year', models.PositiveIntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('EXPIRED', 'Expired'), ('INVALID', 'Invalid')], default='ACTIVE', max_length=20)),
                ('is_default', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to='customers.customerprofile')),
            ],
            options={
                'db_table': 'payments_customer_method',
            },
        ),
        migrations.CreateModel(
            name='PaymentTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('PURCHASE', 'Purchase MTT'), ('SALE', 'Sell MTT'), ('CONVERSION', 'Fiat to MTT Conversion'), ('WITHDRAWAL', 'Withdrawal'), ('DEPOSIT', 'Deposit'), ('REFUND', 'Refund'), ('FEE', 'Fee Payment')], max_length=20)),
                ('reference_id', models.CharField(max_length=100, unique=True)),
                ('fiat_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('fiat_currency', models.CharField(default='USD', max_length=3)),
                ('mtt_amount', models.DecimalField(decimal_places=18, max_digits=40)),
                ('exchange_rate', models.DecimalField(decimal_places=8, max_digits=20)),
                ('platform_fee', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('processing_fee', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('total_fees', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('processor', models.CharField(default='stripe', max_length=50)),
                ('processor_transaction_id', models.CharField(blank=True, max_length=255, null=True)),
                ('processor_fee', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('processor_response', models.JSONField(blank=True, default=dict)),
                ('blockchain_transaction_hash', models.CharField(blank=True, max_length=66, null=True)),
                ('from_address', models.CharField(blank=True, max_length=42, null=True)),
                ('to_address', models.CharField(blank=True, max_length=42, null=True)),
                ('gas_used', models.PositiveBigIntegerField(blank=True, null=True)),
                ('gas_price', models.PositiveBigIntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('REFUNDED', 'Refunded'), ('EXPIRED', 'Expired')], default='PENDING', max_length=20)),
                ('failure_reason', models.TextField(blank=True)),
                ('retry_count', models.PositiveSmallIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('customer_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_transactions', to='customers.customerprofile')),
                ('merchant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_payments', to='merchant.merchant')),
                ('payment_method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payments.customerpaymentmethod')),
            ],
            options={
                'db_table': 'payments_transaction',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentRefund',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('refund_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('refund_currency', models.CharField(max_length=3)),
                ('mtt_returned', models.DecimalField(decimal_places=18, default=0, max_digits=40)),
                ('processor_refund_id', models.CharField(blank=True, max_length=255, null=True)),
                ('refund_reason', models.CharField(choices=[('CUSTOMER_REQUEST', 'Customer Request'), ('MERCHANT_CANCEL', 'Merchant Cancellation'), ('FRAUD', 'Fraud Detection'), ('CHARGEBACK', 'Chargeback'), ('ERROR', 'Processing Error'), ('OTHER', 'Other')], max_length=30)),
                ('reason_details', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('initiated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('original_transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refunds', to='payments.paymenttransaction')),
            ],
            options={
                'db_table': 'payments_refund',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('method_type', models.CharField(choices=[('CREDIT_CARD', 'Credit Card'), ('DEBIT_CARD', 'Debit Card'), ('BANK_TRANSFER', 'Bank Transfer'), ('PAYPAL', 'PayPal'), ('STRIPE', 'Stripe'), ('MTT_TOKEN', 'MTT Token'), ('CRYPTO', 'Cryptocurrency')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_fiat', models.BooleanField(default=True)),
                ('processing_fee_percentage', models.DecimalField(decimal_places=4, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('flat_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('min_amount', models.DecimalField(decimal_places=2, default=1, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('settlement_time_hours', models.PositiveIntegerField(default=24)),
                ('requires_kyc', models.BooleanField(default=False)),
                ('supported_currencies', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'payments_method',
                'indexes': [models.Index(fields=['method_type'], name='payments_me_method__014d37_idx'), models.Index(fields=['is_active'], name='payments_me_is_acti_d75da0_idx'), models.Index(fields=['is_fiat'], name='payments_me_is_fiat_bbfca0_idx')],
            },
        ),
        migrations.CreateModel(
            name='ExchangeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_currency', models.CharField(default='USD', max_length=3)),
                ('target_currency', models.CharField(default='MTT', max_length=10)),
                ('rate', models.DecimalField(decimal_places=8, max_digits=20)),
                ('source', models.CharField(default='internal', max_length=50)),
                ('bid_price', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('ask_price', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('volume_24h', models.DecimalField(blank=True, decimal_places=2, max_digits=40, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('valid_from', models.DateTimeField(auto_now_add=True)),
                ('valid_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'payments_exchange_rate',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['base_currency', 'target_currency', 'is_active'], name='payments_ex_base_cu_786946_idx'), models.Index(fields=['created_at'], name='payments_ex_created_59ee52_idx'), models.Index(fields=['source'], name='payments_ex_source_770551_idx')],
                'unique_together': {('base_currency', 'target_currency', 'valid_from')},
            },
        ),
        migrations.AddField(
            model_name='customerpaymentmethod',
            name='payment_method',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payments.paymentmethod'),
        ),
        migrations.CreateModel(
            name='PaymentWebhook',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('processor', models.CharField(max_length=50)),
                ('webhook_type', models.CharField(choices=[('PAYMENT_SUCCESS', 'Payment Successful'), ('PAYMENT_FAILED', 'Payment Failed'), ('REFUND_PROCESSED', 'Refund Processed'), ('CHARGEBACK', 'Chargeback'), ('DISPUTE', 'Dispute')], max_length=30)),
                ('webhook_id', models.CharField(max_length=255)),
                ('event_data', models.JSONField()),
                ('signature', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSED', 'Processed'), ('FAILED', 'Failed'), ('IGNORED', 'Ignored')], default='PENDING', max_length=20)),
                ('processing_attempts', models.PositiveSmallIntegerField(default=0)),
                ('last_attempt', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('received_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('payment_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='webhooks', to='payments.paymenttransaction')),
            ],
            options={
                'db_table': 'payments_webhook',
                'ordering': ['-received_at'],
                'indexes': [models.Index(fields=['processor', 'webhook_type'], name='payments_we_process_631497_idx'), models.Index(fields=['status'], name='payments_we_status_6754a1_idx'), models.Index(fields=['received_at'], name='payments_we_receive_9a3daa_idx'), models.Index(fields=['payment_transaction'], name='payments_we_payment_7ceff5_idx')],
                'unique_together': {('processor', 'webhook_id')},
            },
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['customer', 'created_at'], name='payments_tr_custome_83754e_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['merchant', 'created_at'], name='payments_tr_merchan_17dcd3_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['status', 'created_at'], name='payments_tr_status_e3597b_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['reference_id'], name='payments_tr_referen_91e1fc_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['processor_transaction_id'], name='payments_tr_process_4958bf_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['blockchain_transaction_hash'], name='payments_tr_blockch_0afff2_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['transaction_type'], name='payments_tr_transac_1d5140_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentrefund',
            index=models.Index(fields=['original_transaction'], name='payments_re_origina_458c9f_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentrefund',
            index=models.Index(fields=['status'], name='payments_re_status_715c3a_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentrefund',
            index=models.Index(fields=['created_at'], name='payments_re_created_d6a5d3_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentrefund',
            index=models.Index(fields=['initiated_by'], name='payments_re_initiat_a42a6e_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpaymentmethod',
            index=models.Index(fields=['customer', 'is_default'], name='payments_cu_custome_491830_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpaymentmethod',
            index=models.Index(fields=['status'], name='payments_cu_status_d28e4b_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpaymentmethod',
            index=models.Index(fields=['payment_method'], name='payments_cu_payment_95ff2b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='customerpaymentmethod',
            unique_together={('customer', 'token')},
        ),
    ]
